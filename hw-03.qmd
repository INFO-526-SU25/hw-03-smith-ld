---
title: "HW 03"
author: "Lucas Smith"
format:
  html:
    embed-resources: true
toc: true
---

```{r}
pkgs = c("tidyverse", "grid", "gridExtra", "ggplot2", "reshape", "ggalt", "likert", "ggstats", "ggimage", "jpeg" ,"png")
for (pkg in pkgs) {
  if (!require(pkg, character.only=TRUE)) {
    install.packages(pkg)
    library(pkg, character.only = TRUE)
  }
}
```

## 1 - Du Bois challenge.

```{r}
#| label: dubois
library(jpeg)
parchment <- readJPEG("images/parchment.jpg")
bg <- rasterGrob(parchment, width = unit(1,"npc"), height = unit(1,"npc"))

dubois <- read_csv("data/income.csv")
db <- pivot_longer(dubois, 
                   c("Rent", "Food", "Clothes", "Tax", "Other"), 
                   names_to="income_type", values_to = "percent")
order <- rev(c("$100-200", 
               "$200-300", 
               "$300-400", 
               "$400-500", 
               "$500-750", 
               "$750-1000", 
               "$1000 AND OVER"
               )
             )
color_vals = c("Rent" = "#141512", "Food" = "#805D7D", 
               "Clothes" = "#DA907F", "Tax"="#958c82", 
               "Other"="#BDB39C"
               )
x_ordering <- c("Rent", "Food", "Clothes", "Tax", "Other")

plt <- ggplot(db, 
              aes(x=percent, 
                  y=Class, 
                  fill=factor(income_type, 
                              levels=rev(x_ordering)
                              ),
                  )) +    
  geom_col(position="stack") + 
  geom_text(aes(label=percent), position = position_stack(vjust = 0.5),
            size=3)

plt <- plt + 
        guides(fill=FALSE) + 
        theme(axis.text.x=element_blank(),
             axis.title.x=element_blank(),
             axis.ticks.x=element_blank(), 
             axis.ticks.y = element_blank(),
             legend.position = NULL, 
             plot.margin=margin(0,0,0,0),
             plot.background = element_blank(),
             axis.text.y = element_blank(),
             panel.background=element_blank(),
             panel.grid.minor=element_blank(),
             panel.grid.major=element_blank()) + 
        labs(x="", y="") +
        scale_y_discrete(limits=order) +
        scale_fill_manual(values=color_vals) 

tabledata <- dubois |> select(Class, Average_Income)
tab <- tableGrob(tabledata, rows=NULL, theme=ttheme_default(base_size = 7, 
                                                           panel.background=element_blank()))
tab$heights <- unit(rep(1/nrow(tab), nrow(tab) ), "npc")

data <- grid.arrange(
  arrangeGrob(tab, nullGrob(), heights=c(200, 5)),
  arrangeGrob(nullGrob(), plt, heights=c(4, 30)),
  widths=c(3, 8)
) 

grid.raster(parchment, width=unit(1, "npc"), height=unit(1, "npc"))
grid.draw(data)

```

## 2 - COVID survey - interpret

```{r}
#| label: label-me-2

```

First I would like to mention that I do not like the Likert scaling used in the questionnaire. Most Likert scales have 5 as `Strongly Agree`, yes for this one it is 1. This provides a difference in the user interaction and user experience, and can cause some confusion on reporting as it is an inconsistent experience when compared to other standardized questions that use the Likert scale. Anyway.

There is a lot going on with this visualization. When I saw this visualization for the first time, I felt overwhelmed at the amount of information, and I believe it is important to understand why.

-   The first thing that I notice is the challenge in deciphering any given point. There are three dimensions shown in the graph: the question, the stratification of individual, and the sub-stratification. To view one range, you need to carefully look back and forth a few times to ensure you are on the right scale, which presents a high cognitive load.

-   The second question I noticed is the challenge to discern anything useful. There is so much data, yet at the same time the question becomes: how is any of this useful?

As for the results:

-   Most scores have a low range, from 1-2.

-   To answer the question of whether I believe it is in line with my intuition, I say: it depends. As a general belief system, I believe in the scientific community and as seeing the good in others as well. I believe that most people thought the vaccines were good and were a benefit to society. That part of me does want to go back to the Likert scaling inversion I mentioned before, and say that most people did not read the specifics of what *this* questionnaire's 1 and 5 meant, and assumed that 1 meant disagree and 5 meant agree.

-   The other part of me thinks that it is feasible that many people were skeptical of the vaccine at the time it was released. It was released under different circumstances than a regular vaccine, and I do remember skepticism at the time.

Examples

-   All people thought that they did trust information about the vaccines. The lowest score was a 2.

-   Similarly, all nursing professionals stated that they would recommend the vaccine to friends/family as a 1; in this scoring I would assume that to be accurate.

-   The final note, all medical professionals had a mean value of less than 2 when asked if the vaccine was safe. I would also assume this to be accurate in this scoring.

## 3 - COVID survey - reconstruct

```{r}
#| label: load covid data
covid <- read_csv("data/covid-survey.csv")
```

```{r}
#| label: load covid round 2
covid <- read_csv("data/covid-survey.csv", skip=1)

```

```{r}
#| label: filter null covid values
# filter out any no longer useful
colnames <- colnames(covid[, -1])
filtered_missing_rows <- covid |> filter(!if_all(.cols=colnames, is.na))
dim(filtered_missing_rows)
```

-   Relabel the survey response values according to the information in `data/covid_survey.pdf`. Peeking at the plot youâ€™re working towards reconstructing can also be helpful to identify how exactly to recode the variables. Print the dimensions of the resulting data frame with `dim()`.

    -   `exp_already_vax` and `exp_flu_vax`: 0 - No, 1 - Yes

    -   `exp_profession`: 0 - Medical, 1 - Nursing

    -   `exp_gender`: 0 - Male, 1 - Female, 3 - Non-binary third gender, 4 - Prefer not to say

    -   `exp_race`: 1 - American Indian / Alaskan Native, 2 - Asian, 3 - Black / African American, 4 - Native Hawaiian / Other Pacific Islander, 5 - White

    -   `exp_ethnicity`: 1 - Hispanic / Latino, 2 - Non-Hispanic/Non-Latino

    -   `exp_age_bin`: 0 - \<20, 20 - 21-25, 25 - 26-30, 30 - \>30

```{r}
#| label: assign covid responses, cleanse data

# I moved things over to factored in the second code chunk

survey_response_values <- c(
  "1" = "Strongly agree",
  "2" = "Somewhat agree",
  "3" = "Neither agree nor disagree",
  "4" = "Somewhat disagree",
  "5" = "Strongly disagree"
)

relabeled_cols <- colnames(covid[, seq(from=9, to=14)])
covid2 <- covid

covid <- covid |> mutate(across(relabeled_cols, ~ survey_response_values[as.character(.)]))
covid <- covid |>
  mutate(exp_already_vax=case_when(
    exp_already_vax== 0 ~ "No", exp_already_vax== 1 ~ "Yes"
  )) |>
  mutate(exp_flu_vax=case_when(
    exp_flu_vax== 0 ~ "No", exp_flu_vax== 1 ~ "Yes"
  )) |>
  mutate(exp_profession=case_when(
    exp_profession== 0 ~ "Medical", exp_profession== 1 ~ "Nursing"
  )) |>
  mutate(exp_gender=case_when(
    exp_gender== 0 ~ "Male", 
    exp_gender== 1 ~ "Female", 
    exp_gender== 2 ~ "Non-binary third gender", 
    exp_gender== 3 ~ "Prefer not to say"
  )) |>
  mutate(exp_race=case_when(
    exp_race== 1 ~ "American Indian / Alaskan Native", 
    exp_race== 2 ~ "Asian", 
    exp_race== 3 ~ "Black / African American", 
    exp_race== 4 ~ "Native Hawaiian / Other Pacific Islander", 
    exp_race== 5 ~ "White"
  )) |>
  mutate(exp_ethnicity=case_when(
    exp_ethnicity== 1 ~ "Hispanic / Latino", 
    exp_ethnicity== 2 ~ "Non-Hispanic/Non-Latino"
  )) |>
  mutate(exp_age_bin=case_when(
    exp_age_bin== 0 ~ "<20", 
    exp_age_bin== 20 ~ "21-25", 
    exp_age_bin== 25  ~ "26-30", 
    exp_age_bin== 30 ~ ">30"
  ))


dim(covid)
```

```{r}
#| label: assign responses again 
coviddata <- covid2 |>
  mutate(exp_already_vax=as.factor(case_when(
    exp_already_vax== 0 ~ "No", exp_already_vax== 1 ~ "Yes"
  ))) |>
  mutate(exp_flu_vax=as.factor(case_when(
    exp_flu_vax== 0 ~ "No", exp_flu_vax== 1 ~ "Yes"
  ))) |>
  mutate(exp_profession=as.factor(case_when(
    exp_profession== 0 ~ "Medical", exp_profession== 1 ~ "Nursing"
  ))) |>
  mutate(exp_gender=as.factor(case_when(
    exp_gender== 0 ~ "Male", 
    exp_gender== 1 ~ "Female", 
    exp_gender== 2 ~ "Non-binary third gender", 
    exp_gender== 3 ~ "Prefer not to say"
  ))) |>
  mutate(exp_race=as.factor(case_when(
    exp_race== 1 ~ "American Indian / Alaskan Native", 
    exp_race== 2 ~ "Asian", 
    exp_race== 3 ~ "Black / African American", 
    exp_race== 4 ~ "Native Hawaiian / Other Pacific Islander", 
    exp_race== 5 ~ "White"
  ))) |>
  mutate(exp_ethnicity=as.factor(case_when(
    exp_ethnicity== 1 ~ "Hispanic / Latino", 
    exp_ethnicity== 2 ~ "Non-Hispanic/Non-Latino"
  ))) |>
  mutate(exp_age_bin=as.factor(case_when(
    exp_age_bin== 0 ~ "<20", 
    exp_age_bin== 20 ~ "21-25", 
    exp_age_bin== 25  ~ "26-30", 
    exp_age_bin== 30 ~ ">30"
  )))

covid_survey_longer <- coviddata |>
  pivot_longer(
    cols = starts_with("exp_"),
    names_to = "explanatory",
    values_to = "explanatory_value"
  ) |>
  filter(!is.na(explanatory_value)) |>
  pivot_longer(
    cols = starts_with("resp_"),
    names_to = "response",
    values_to = "response_value"
  )
```

```{r}
#| label: view covid tribbler (longer)
tibble(covid_survey_longer)
```

```{r}
#| label: create covid summary, and view

# viewing to verify everything is alright, removing nulls because otherwise it doesn't work
covid_survey_summary_stats_by_group <- covid_survey_longer |> 
  mutate(response_value = as.numeric(response_value)) |>
  group_by(explanatory, explanatory_value, response) |> 
  summarise(
    mean=mean(response_value, na.rm=TRUE),
    low=quantile(response_value, .1, na.rm=TRUE),
    high=quantile(response_value,.9, na.rm=TRUE)  )

covid_survey_summary_stats_by_group
```

-   

-   Now group the data (`covid_survey_longer`) again, this time only by `response`, in order to calculate the same summary statistics for each response variable (mean, 10th percentile, and 90th percentile), not conditioned on the explanatory variables. Name this new data frame `covid_survey_summary_stats_all`. It should look like the following:

```{r}
#| label: create covid summary stats

# ended up adding the explanatory value="" on this to make it like yours 
covid_survey_summary_stats_all <- covid_survey_longer |> 
  group_by(response) |> 
  summarise(
    mean=mean(response_value, na.rm=TRUE),
    low=quantile(response_value, .1, na.rm=TRUE),
    high=quantile(response_value,.9, na.rm=TRUE)  ) |> 
  mutate(
    explanatory = "All",
    explanatory_value = ""
  )


covid_survey_summary_stats_all
```

-   Bind the two data frames of summary statistics you created `covid_survey_summary_stats_all` and `covid_survey_summary_stats_by_group` together by row. Name the resulting data frame `covid_survey_summary_stats`. It should look like the following:

```{r}
#| label: merge dataframes (covid summaries)

# merging both row wise 
covid_survey_summary_stats <- bind_rows(covid_survey_summary_stats_all, covid_survey_summary_stats_by_group)

covid_survey_summary_stats
```

```         
```

## 4 - COVID survey - re-reconstruct

```{r fig.width=10, fig.height=5}
#| label: remake covid likert plot




csss <- covid_survey_summary_stats
# I saw that factors were being used, so tried that. 
csss <- csss |> mutate(
    explanatory = factor(explanatory),
    explanatory_value = factor(explanatory_value),
    response = factor(response)
  ) |>
  droplevels()

# 
p <- ggplot(csss, aes(y=explanatory_value)) +
  geom_segment(aes(x=low, xend=high), linewidth=.3) + 
  theme(
      legend.position=NULL,
      axis.ticks.x=element_blank(),
      axis.ticks.y=element_blank(), 
      panel.background = element_blank()
    ) + 
    geom_point(aes(x=mean), size=.5) + 
    geom_errorbar(aes(xmin=low, xmax=high), width=0.4)
  labs(x="", y="")

xlabels <- c(
  "resp_safety" = "Based on my \nunderstanding, I \nbelieve the \nvaccine is safe",
"resp_confidence_science" = "I am confident \nin the scientific \nvetting process \nfor the new \nCOVID vaccines", 
"resp_feel_safe_at_work" = "Getting the vaccine \nwill make me feel \nsafer at work",
"resp_will_recommend" = "I will recommend the \nvaccine to family, friends, \nand community members",
"resp_trust_info" = "I trust the \ninformation that I \nhave received \nabout the vaccines",
"resp_concern_safety" = "I am concerned about \nthe safety and \nside effects \nof the vaccine"
)

ylabels <- c(
  "exp_age_bin" = "Age",
"exp_gender" = "Gender",
"exp_race" = "Race",
"exp_ethnicity" = "Ethnicity",
"exp_profession" = "Profession",
"exp_already_vax" = "Had COVID vaccine",
"exp_flu_vax" = "Had flu vaccine this year"
)

p + facet_grid(vars(explanatory), vars(response), scales="free_y", space="free_y", drop=TRUE,
               labeller = labeller(explanatory = ylabels, response=xlabels)) + 
  theme(
    strip.text.x = element_text(size=6),
    strip.text.y = element_text(angle=0),
    strip.background = element_rect(color = "black", size = .2)
  ) + labs(x="Mean Likert score\n(Error bars range from 10th to 90th percentile)")
```

## 5 - COVID survey - another view

**COVID survey - another view.** Create two bar charts of the Likert data for the six survey questions in from the plot in Exercise 2. This should be a single plot visualizing the percentages of each possible answer, with different questions on the y-axis. Use an appropriate color scale.

a.  Create a diverging bar chart. Write alt text for your visualization as well.

```{r}
#| label: get likert data, assign as factors

# You can probably find a way to reuse one of the data sets I already made,
# but I couldn't figure out the best way to do so.
likertdata <- covid_survey_longer |> select(response, response_value)
likertdata <- likertdata |> mutate(
  response = factor(response),
  response_value = factor(response_value)
)

```

```{r}
#| label: get likert percentages

# get summaries and percentages
percentlikerts <- likertdata |> 
  group_by(response, response_value) |>
  summarise(count=n()) |>
  mutate( prop = count / sum(count) )

```

```{r}
#| label: create first likert plot (divergent)
alt_text <- "This graph is a diverging horizontal bar chart of likert scores for a covid related survey. On the x-axis is the count of each likert, and the y-axis contains the different survey questions. There are 6 questions responded to: the likelihood to recommend a vaccine, to trust information regarding the vaccine, tovaccine safety, ability to feel safe at work, confidence in science, and concern for safety. Most value responses tend toward lower values, with most values in the 1-2 range. Responses on the concern for safety present a high trend, with most values either a 4 or 5. "


survey_response_values <- c(
  "1" = "Strongly agree",
  "2" = "Somewhat agree",
  "3" = "Neither agree nor disagree",
  "4" = "Somewhat disagree",
  "5" = "Strongly disagree"
)

# label negative values so we can put them as negative values on the graph 

negative_values <- c("Somewhat disagree", "Strongly disagree")

# make 3 new variables
# - getting the 1-5 likert scores as text
# - fixing negative likert scores as negative percentages
# - factoring the values to order them for the graph

percentages <- percentlikerts |>
  mutate(percentages=round(prop * 100, 3),
         response_value_as_text=survey_response_values[as.character(response_value)],
         response_value_factored=factor(response_value_as_text, c(
           "Strongly disagree", "Somewhat disagree",
           "Strongly agree", "Somewhat agree", "Neither agree nor disagree"
           # had to mix up the ordering to get it right
         )),
         fixed_percentages=case_when(
           response_value_factored %in% negative_values ~ -percentages,
                         TRUE ~ percentages
           )
         ) |> 
  select(response, response_value_factored, fixed_percentages, percentages)


# making a column, stacked, then organizing
# - assigning labels in the legend 
# - assigning values with colors
# - fixing the legend order
# - fixing up legend title, x/y axes 
# I reused the response value from the previous question 
ggplot(percentages, aes(x=response, group=response_value_factored, y=fixed_percentages,
                        fill=response_value_factored)) + 
  geom_col() + 
  coord_flip() + 
  scale_x_discrete(labels=xlabels) + 
  scale_fill_manual(values=c(
  "Strongly disagree" = "#D73027",
  "Somewhat disagree" = "#FC8D59",
  "Neither agree nor disagree" = "#FEE08B",
  "Somewhat agree" = "#91BFDB",
  "Strongly agree" = "#4575B4"
  ),
  breaks=c(
      "Strongly disagree" ,
  "Somewhat disagree",
  "Neither agree nor disagree",
  "Somewhat agree",
  "Strongly agree"
  )) + theme_minimal() + 
  labs(y="",
       x="Percent Response",
       title="Percentage of Responses for Covid Questions",
           alt=alt_text
) + 
  guides(fill=guide_legend(title="Response Value"))
  

```

```{r}
#| label: create second likert plot (stacked bar)

# there is probably an easier way to do this... this is what I could come up with 
# would love to see the solution on all of these questions to learn from.

# - fix percentages
# - I couldn't figure out how to clean up the fact that they were so close. 
# - give them them a color assignment 
ggplot(percentages, aes(x=response, y=percentages, fill=factor(response_value_factored, c(
           "Strongly disagree", "Somewhat disagree",
           "Neither agree nor disagree",
           "Somewhat agree", "Strongly agree"
           # had to mix up the ordering to get it right
         )))) + 
  geom_col() +
  geom_text(aes(label = paste0(round(percentages, 0), "%")),
            position = position_stack(vjust = 0.5),  # place in the middle 
            color = "black",
            fontface = "bold", size=3) + 
    coord_flip() +
  labs(
    title="Likert scores of Covid related survey",
    x="", y="Percentages of survey responses"
  ) +   guides(fill=guide_legend(title="Response Values")) + 
scale_fill_brewer(palette = "Blues") + 
  scale_x_discrete(labels=xlabels) + 
  theme(
    panel.background=element_blank()
  )
```
